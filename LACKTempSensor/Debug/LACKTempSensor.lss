
LACKTempSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000892  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f7f  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000add  00000000  00000000  00001963  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dd  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00002d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000555  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000752  00000000  00000000  00003461  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003bb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
   2:	29 c0       	rjmp	.+82     	; 0x56 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__bad_interrupt>
   6:	27 c0       	rjmp	.+78     	; 0x56 <__bad_interrupt>
   8:	26 c0       	rjmp	.+76     	; 0x56 <__bad_interrupt>
   a:	25 c0       	rjmp	.+74     	; 0x56 <__bad_interrupt>
   c:	24 c0       	rjmp	.+72     	; 0x56 <__bad_interrupt>
   e:	23 c0       	rjmp	.+70     	; 0x56 <__bad_interrupt>
  10:	22 c0       	rjmp	.+68     	; 0x56 <__bad_interrupt>
  12:	21 c0       	rjmp	.+66     	; 0x56 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__bad_interrupt>
  16:	1f c0       	rjmp	.+62     	; 0x56 <__bad_interrupt>
  18:	1e c0       	rjmp	.+60     	; 0x56 <__bad_interrupt>
  1a:	1d c0       	rjmp	.+58     	; 0x56 <__bad_interrupt>
  1c:	1c c0       	rjmp	.+56     	; 0x56 <__bad_interrupt>
  1e:	1b c0       	rjmp	.+54     	; 0x56 <__bad_interrupt>
  20:	98 c1       	rjmp	.+816    	; 0x352 <__vector_16>
  22:	19 c0       	rjmp	.+50     	; 0x56 <__bad_interrupt>
  24:	18 c0       	rjmp	.+48     	; 0x56 <__bad_interrupt>
  26:	17 c0       	rjmp	.+46     	; 0x56 <__bad_interrupt>
  28:	16 c0       	rjmp	.+44     	; 0x56 <__bad_interrupt>
  2a:	15 c0       	rjmp	.+42     	; 0x56 <__bad_interrupt>
  2c:	14 c0       	rjmp	.+40     	; 0x56 <__bad_interrupt>
  2e:	13 c0       	rjmp	.+38     	; 0x56 <__bad_interrupt>
  30:	12 c0       	rjmp	.+36     	; 0x56 <__bad_interrupt>
  32:	11 c0       	rjmp	.+34     	; 0x56 <__bad_interrupt>
  34:	10 c0       	rjmp	.+32     	; 0x56 <__bad_interrupt>

00000036 <__ctors_end>:
  36:	11 24       	eor	r1, r1
  38:	1f be       	out	0x3f, r1	; 63
  3a:	cf ef       	ldi	r28, 0xFF	; 255
  3c:	d4 e0       	ldi	r29, 0x04	; 4
  3e:	de bf       	out	0x3e, r29	; 62
  40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_clear_bss>:
  42:	21 e0       	ldi	r18, 0x01	; 1
  44:	a0 e0       	ldi	r26, 0x00	; 0
  46:	b1 e0       	ldi	r27, 0x01	; 1
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	a2 30       	cpi	r26, 0x02	; 2
  4e:	b2 07       	cpc	r27, r18
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>
  52:	a7 d1       	rcall	.+846    	; 0x3a2 <main>
  54:	e2 c3       	rjmp	.+1988   	; 0x81a <_exit>

00000056 <__bad_interrupt>:
  56:	d4 cf       	rjmp	.-88     	; 0x0 <__vectors>

00000058 <LTC4627JS_Init>:
		LTC4627JS_Write(5, 10);*/
	}
	LTC4627JS_Write(3, ones);
	
	return; //Return to call point
}
  58:	c4 d1       	rcall	.+904    	; 0x3e2 <PWM_Init>
  5a:	88 e2       	ldi	r24, 0x28	; 40
  5c:	e2 d1       	rcall	.+964    	; 0x422 <PWM_timer1_a>
  5e:	87 b1       	in	r24, 0x07	; 7
  60:	8d 60       	ori	r24, 0x0D	; 13
  62:	87 b9       	out	0x07, r24	; 7
  64:	88 b1       	in	r24, 0x08	; 8
  66:	88 b9       	out	0x08, r24	; 8
  68:	8a b1       	in	r24, 0x0a	; 10
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	8a b9       	out	0x0a, r24	; 10
  6e:	8b b1       	in	r24, 0x0b	; 11
  70:	8b b9       	out	0x0b, r24	; 11
  72:	08 95       	ret

00000074 <LTC4627JS_Write>:
  74:	67 30       	cpi	r22, 0x07	; 7
  76:	89 f1       	breq	.+98     	; 0xda <LTC4627JS_Write+0x66>
  78:	58 f4       	brcc	.+22     	; 0x90 <LTC4627JS_Write+0x1c>
  7a:	63 30       	cpi	r22, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <LTC4627JS_Write+0x4e>
  7e:	20 f4       	brcc	.+8      	; 0x88 <LTC4627JS_Write+0x14>
  80:	61 30       	cpi	r22, 0x01	; 1
  82:	c9 f0       	breq	.+50     	; 0xb6 <LTC4627JS_Write+0x42>
  84:	a8 f0       	brcs	.+42     	; 0xb0 <LTC4627JS_Write+0x3c>
  86:	1a c0       	rjmp	.+52     	; 0xbc <LTC4627JS_Write+0x48>
  88:	65 30       	cpi	r22, 0x05	; 5
  8a:	09 f1       	breq	.+66     	; 0xce <LTC4627JS_Write+0x5a>
  8c:	e8 f0       	brcs	.+58     	; 0xc8 <LTC4627JS_Write+0x54>
  8e:	22 c0       	rjmp	.+68     	; 0xd4 <LTC4627JS_Write+0x60>
  90:	6b 32       	cpi	r22, 0x2B	; 43
  92:	a1 f1       	breq	.+104    	; 0xfc <LTC4627JS_Write+0x88>
  94:	30 f4       	brcc	.+12     	; 0xa2 <LTC4627JS_Write+0x2e>
  96:	69 30       	cpi	r22, 0x09	; 9
  98:	29 f1       	breq	.+74     	; 0xe4 <LTC4627JS_Write+0x70>
  9a:	10 f1       	brcs	.+68     	; 0xe0 <LTC4627JS_Write+0x6c>
  9c:	6a 30       	cpi	r22, 0x0A	; 10
  9e:	41 f1       	breq	.+80     	; 0xf0 <LTC4627JS_Write+0x7c>
  a0:	33 c0       	rjmp	.+102    	; 0x108 <LTC4627JS_Write+0x94>
  a2:	6b 34       	cpi	r22, 0x4B	; 75
  a4:	71 f1       	breq	.+92     	; 0x102 <LTC4627JS_Write+0x8e>
  a6:	6f 3f       	cpi	r22, 0xFF	; 255
  a8:	01 f1       	breq	.+64     	; 0xea <LTC4627JS_Write+0x76>
  aa:	66 34       	cpi	r22, 0x46	; 70
  ac:	69 f5       	brne	.+90     	; 0x108 <LTC4627JS_Write+0x94>
  ae:	23 c0       	rjmp	.+70     	; 0xf6 <LTC4627JS_Write+0x82>
  b0:	90 e4       	ldi	r25, 0x40	; 64
  b2:	9b b9       	out	0x0b, r25	; 11
  b4:	2b c0       	rjmp	.+86     	; 0x10c <LTC4627JS_Write+0x98>
  b6:	99 e7       	ldi	r25, 0x79	; 121
  b8:	9b b9       	out	0x0b, r25	; 11
  ba:	28 c0       	rjmp	.+80     	; 0x10c <LTC4627JS_Write+0x98>
  bc:	94 e2       	ldi	r25, 0x24	; 36
  be:	9b b9       	out	0x0b, r25	; 11
  c0:	25 c0       	rjmp	.+74     	; 0x10c <LTC4627JS_Write+0x98>
  c2:	90 e3       	ldi	r25, 0x30	; 48
  c4:	9b b9       	out	0x0b, r25	; 11
  c6:	22 c0       	rjmp	.+68     	; 0x10c <LTC4627JS_Write+0x98>
  c8:	99 e1       	ldi	r25, 0x19	; 25
  ca:	9b b9       	out	0x0b, r25	; 11
  cc:	1f c0       	rjmp	.+62     	; 0x10c <LTC4627JS_Write+0x98>
  ce:	92 e1       	ldi	r25, 0x12	; 18
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	1c c0       	rjmp	.+56     	; 0x10c <LTC4627JS_Write+0x98>
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	9b b9       	out	0x0b, r25	; 11
  d8:	19 c0       	rjmp	.+50     	; 0x10c <LTC4627JS_Write+0x98>
  da:	98 e7       	ldi	r25, 0x78	; 120
  dc:	9b b9       	out	0x0b, r25	; 11
  de:	16 c0       	rjmp	.+44     	; 0x10c <LTC4627JS_Write+0x98>
  e0:	1b b8       	out	0x0b, r1	; 11
  e2:	14 c0       	rjmp	.+40     	; 0x10c <LTC4627JS_Write+0x98>
  e4:	90 e1       	ldi	r25, 0x10	; 16
  e6:	9b b9       	out	0x0b, r25	; 11
  e8:	11 c0       	rjmp	.+34     	; 0x10c <LTC4627JS_Write+0x98>
  ea:	9f ef       	ldi	r25, 0xFF	; 255
  ec:	9b b9       	out	0x0b, r25	; 11
  ee:	0e c0       	rjmp	.+28     	; 0x10c <LTC4627JS_Write+0x98>
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	9b b9       	out	0x0b, r25	; 11
  f4:	0b c0       	rjmp	.+22     	; 0x10c <LTC4627JS_Write+0x98>
  f6:	9e e8       	ldi	r25, 0x8E	; 142
  f8:	9b b9       	out	0x0b, r25	; 11
  fa:	08 c0       	rjmp	.+16     	; 0x10c <LTC4627JS_Write+0x98>
  fc:	96 e4       	ldi	r25, 0x46	; 70
  fe:	9b b9       	out	0x0b, r25	; 11
 100:	05 c0       	rjmp	.+10     	; 0x10c <LTC4627JS_Write+0x98>
 102:	95 e0       	ldi	r25, 0x05	; 5
 104:	9b b9       	out	0x0b, r25	; 11
 106:	02 c0       	rjmp	.+4      	; 0x10c <LTC4627JS_Write+0x98>
 108:	90 e4       	ldi	r25, 0x40	; 64
 10a:	9b b9       	out	0x0b, r25	; 11
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	49 f0       	breq	.+18     	; 0x122 <LTC4627JS_Write+0xae>
 110:	28 f0       	brcs	.+10     	; 0x11c <LTC4627JS_Write+0xa8>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	49 f0       	breq	.+18     	; 0x128 <LTC4627JS_Write+0xb4>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	51 f0       	breq	.+20     	; 0x12e <LTC4627JS_Write+0xba>
 11a:	0b c0       	rjmp	.+22     	; 0x132 <LTC4627JS_Write+0xbe>
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	88 b9       	out	0x08, r24	; 8
 120:	0a c0       	rjmp	.+20     	; 0x136 <LTC4627JS_Write+0xc2>
 122:	85 e0       	ldi	r24, 0x05	; 5
 124:	88 b9       	out	0x08, r24	; 8
 126:	07 c0       	rjmp	.+14     	; 0x136 <LTC4627JS_Write+0xc2>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	04 c0       	rjmp	.+8      	; 0x136 <LTC4627JS_Write+0xc2>
 12e:	18 b8       	out	0x08, r1	; 8
 130:	02 c0       	rjmp	.+4      	; 0x136 <LTC4627JS_Write+0xc2>
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	88 b9       	out	0x08, r24	; 8
 136:	83 ef       	ldi	r24, 0xF3	; 243
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LTC4627JS_Write+0xc6>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LTC4627JS_Write+0xcc>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <LTC4627JS_DisplayTemp>:

void LTC4627JS_DisplayTemp(uint16_t number, uint8_t units){
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	fc 01       	movw	r30, r24
 156:	f6 2e       	mov	r15, r22
	//Get the hundreds place if applicable
	uint8_t hundreds = ((number / 100) % 10);
 158:	9c 01       	movw	r18, r24
 15a:	36 95       	lsr	r19
 15c:	27 95       	ror	r18
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	ab e7       	ldi	r26, 0x7B	; 123
 164:	b4 e1       	ldi	r27, 0x14	; 20
 166:	4d d3       	rcall	.+1690   	; 0x802 <__umulhisi3>
 168:	8c 01       	movw	r16, r24
 16a:	16 95       	lsr	r17
 16c:	07 95       	ror	r16
 16e:	98 01       	movw	r18, r16
 170:	ad ec       	ldi	r26, 0xCD	; 205
 172:	bc ec       	ldi	r27, 0xCC	; 204
 174:	46 d3       	rcall	.+1676   	; 0x802 <__umulhisi3>
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	9c 01       	movw	r18, r24
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	82 0f       	add	r24, r18
 196:	93 1f       	adc	r25, r19
 198:	08 1b       	sub	r16, r24
 19a:	19 0b       	sbc	r17, r25
	//Get the tens place
	uint8_t tens = ((number / 10) % 10);
 19c:	9f 01       	movw	r18, r30
 19e:	31 d3       	rcall	.+1634   	; 0x802 <__umulhisi3>
 1a0:	ac 01       	movw	r20, r24
 1a2:	56 95       	lsr	r21
 1a4:	47 95       	ror	r20
 1a6:	56 95       	lsr	r21
 1a8:	47 95       	ror	r20
 1aa:	56 95       	lsr	r21
 1ac:	47 95       	ror	r20
 1ae:	9a 01       	movw	r18, r20
 1b0:	28 d3       	rcall	.+1616   	; 0x802 <__umulhisi3>
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	9c 01       	movw	r18, r24
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	82 0f       	add	r24, r18
 1d2:	93 1f       	adc	r25, r19
 1d4:	ea 01       	movw	r28, r20
 1d6:	c8 1b       	sub	r28, r24
 1d8:	d9 0b       	sbc	r29, r25
	//Get the ones place
	uint8_t ones = ((number / 1) % 10);
 1da:	ca 01       	movw	r24, r20
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	48 0f       	add	r20, r24
 1ee:	59 1f       	adc	r21, r25
 1f0:	6f 01       	movw	r12, r30
 1f2:	c4 1a       	sub	r12, r20
 1f4:	d5 0a       	sbc	r13, r21
	//Push those numbers to their respective places on the display
	if(hundreds == 0){
 1f6:	01 11       	cpse	r16, r1
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <LTC4627JS_DisplayTemp+0xc2>
		//If the hundreds is zero then print a blank
		LTC4627JS_Write(0, LTC4627JS_CHAR_BLANK);
 1fa:	6f ef       	ldi	r22, 0xFF	; 255
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	3a df       	rcall	.-396    	; 0x74 <LTC4627JS_Write>
	}
	else{
		//Otherwise show it
		LTC4627JS_Write(0, hundreds);
	}
	if(tens == 0 && hundreds == 0){
 200:	c1 11       	cpse	r28, r1
 202:	09 c0       	rjmp	.+18     	; 0x216 <LTC4627JS_DisplayTemp+0xd2>
 204:	04 c0       	rjmp	.+8      	; 0x20e <LTC4627JS_DisplayTemp+0xca>
		//If the hundreds is zero then print a blank
		LTC4627JS_Write(0, LTC4627JS_CHAR_BLANK);
	}
	else{
		//Otherwise show it
		LTC4627JS_Write(0, hundreds);
 206:	60 2f       	mov	r22, r16
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	34 df       	rcall	.-408    	; 0x74 <LTC4627JS_Write>
 20c:	04 c0       	rjmp	.+8      	; 0x216 <LTC4627JS_DisplayTemp+0xd2>
	}
	if(tens == 0 && hundreds == 0){
		//If the tens is zero as well as the hundreds then print a blank
		LTC4627JS_Write(1, LTC4627JS_CHAR_BLANK);
 20e:	6f ef       	ldi	r22, 0xFF	; 255
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	30 df       	rcall	.-416    	; 0x74 <LTC4627JS_Write>
 214:	03 c0       	rjmp	.+6      	; 0x21c <LTC4627JS_DisplayTemp+0xd8>
	}
	else{
		//Otherwise show it
		LTC4627JS_Write(1, tens);
 216:	6c 2f       	mov	r22, r28
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	2c df       	rcall	.-424    	; 0x74 <LTC4627JS_Write>
	}
	//Otherwise show it
	LTC4627JS_Write(2, ones);
 21c:	6c 2d       	mov	r22, r12
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	29 df       	rcall	.-430    	; 0x74 <LTC4627JS_Write>
	switch(units){
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	f8 16       	cp	r15, r24
 226:	51 f0       	breq	.+20     	; 0x23c <LTC4627JS_DisplayTemp+0xf8>
 228:	f8 16       	cp	r15, r24
 22a:	20 f0       	brcs	.+8      	; 0x234 <LTC4627JS_DisplayTemp+0xf0>
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	f8 16       	cp	r15, r24
 230:	61 f0       	breq	.+24     	; 0x24a <LTC4627JS_DisplayTemp+0x106>
 232:	12 c0       	rjmp	.+36     	; 0x258 <LTC4627JS_DisplayTemp+0x114>
		case 0:
			LTC4627JS_Write(3, 75);
 234:	6b e4       	ldi	r22, 0x4B	; 75
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	1d df       	rcall	.-454    	; 0x74 <LTC4627JS_Write>
			break;
 23a:	14 c0       	rjmp	.+40     	; 0x264 <LTC4627JS_DisplayTemp+0x120>
		case 1:
			LTC4627JS_Write(3, 43);
 23c:	6b e2       	ldi	r22, 0x2B	; 43
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	19 df       	rcall	.-462    	; 0x74 <LTC4627JS_Write>
			LTC4627JS_Write(5, 10);
 242:	6a e0       	ldi	r22, 0x0A	; 10
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	16 df       	rcall	.-468    	; 0x74 <LTC4627JS_Write>
			break;
 248:	0d c0       	rjmp	.+26     	; 0x264 <LTC4627JS_DisplayTemp+0x120>
		case 2:
			LTC4627JS_Write(3, 70);
 24a:	66 e4       	ldi	r22, 0x46	; 70
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	12 df       	rcall	.-476    	; 0x74 <LTC4627JS_Write>
			LTC4627JS_Write(5, 10);
 250:	6a e0       	ldi	r22, 0x0A	; 10
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	0f df       	rcall	.-482    	; 0x74 <LTC4627JS_Write>
			break;
 256:	06 c0       	rjmp	.+12     	; 0x264 <LTC4627JS_DisplayTemp+0x120>
		default:
			LTC4627JS_Write(3, 70);
 258:	66 e4       	ldi	r22, 0x46	; 70
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	0b df       	rcall	.-490    	; 0x74 <LTC4627JS_Write>
			LTC4627JS_Write(5, 10);
 25e:	6a e0       	ldi	r22, 0x0A	; 10
 260:	85 e0       	ldi	r24, 0x05	; 5
 262:	08 df       	rcall	.-496    	; 0x74 <LTC4627JS_Write>
			break;
	}
	return; //Return to call point
};
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	df 90       	pop	r13
 272:	cf 90       	pop	r12
 274:	08 95       	ret

00000276 <ADC_Init>:
		default:
			//Centigrade or unknown
			break;
	}
	return value;
}
 276:	81 e8       	ldi	r24, 0x81	; 129
 278:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 27c:	87 e8       	ldi	r24, 0x87	; 135
 27e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 282:	08 95       	ret

00000284 <ADC_Value>:

//Reads the value from the ADC
uint16_t ADC_Value(){
	//Use VCC for the analog reference voltage, right justify result, only use ADC0 for input
	ADMUX = (1<<REFS1)|(0<<REFS0)|(0<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0);
 284:	81 e8       	ldi	r24, 0x81	; 129
 286:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	//Pass bit in to get request measurement
	ADCSRA |= (1<<ADSC);
 28a:	ea e7       	ldi	r30, 0x7A	; 122
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
	//Wait for conversion
	while(BIT_SET(ADCSRA, ADSC));
 294:	80 81       	ld	r24, Z
 296:	86 fd       	sbrc	r24, 6
 298:	fd cf       	rjmp	.-6      	; 0x294 <ADC_Value+0x10>
	//Return the 10-bit right justified result
	return ADC;
 29a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 29e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
 2a2:	08 95       	ret

000002a4 <LM335_Init>:
/******************** Functions **************************/

//Initialize ADC that this sensor relies on
void LM335_Init(){
	//Initialize the output 
	ADC_Init();
 2a4:	e8 df       	rcall	.-48     	; 0x276 <ADC_Init>
 2a6:	08 95       	ret

000002a8 <LM335_Read>:
	return; //Return to call point
}

//Collect the current temp from the sensor, scale appropriately and return in specified units
float LM335_Read(enum tempunits units){
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
	float value;
	//Get the current value from the 10-bit ADC
	uint16_t raw_value = ADC_Value();
 2ac:	eb df       	rcall	.-42     	; 0x284 <ADC_Value>
	raw_value = 1024 - raw_value; //Get the reverse of the range of numbers
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	74 e0       	ldi	r23, 0x04	; 4
 2b2:	68 1b       	sub	r22, r24
 2b4:	79 0b       	sbc	r23, r25
	//Return in the specified units
	switch(units){
 2b6:	c1 30       	cpi	r28, 0x01	; 1
 2b8:	89 f0       	breq	.+34     	; 0x2dc <LM335_Read+0x34>
 2ba:	18 f0       	brcs	.+6      	; 0x2c2 <LM335_Read+0x1a>
 2bc:	c2 30       	cpi	r28, 0x02	; 2
 2be:	01 f1       	breq	.+64     	; 0x300 <LM335_Read+0x58>
 2c0:	3b c0       	rjmp	.+118    	; 0x338 <LM335_Read+0x90>
		case KELVIN:
			value = raw_value * 0.4882;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	ac d1       	rcall	.+856    	; 0x620 <__floatunsisf>
 2c8:	2a e5       	ldi	r18, 0x5A	; 90
 2ca:	35 ef       	ldi	r19, 0xF5	; 245
 2cc:	49 ef       	ldi	r20, 0xF9	; 249
 2ce:	5e e3       	ldi	r21, 0x3E	; 62
 2d0:	35 d2       	rcall	.+1130   	; 0x73c <__mulsf3>
			return value;
 2d2:	56 2f       	mov	r21, r22
 2d4:	47 2f       	mov	r20, r23
 2d6:	38 2f       	mov	r19, r24
 2d8:	29 2f       	mov	r18, r25
 2da:	35 c0       	rjmp	.+106    	; 0x346 <LM335_Read+0x9e>
		break;
		case CELSUIS:
			value = (raw_value * 0.4882) - 273.15;
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	9f d1       	rcall	.+830    	; 0x620 <__floatunsisf>
 2e2:	2a e5       	ldi	r18, 0x5A	; 90
 2e4:	35 ef       	ldi	r19, 0xF5	; 245
 2e6:	49 ef       	ldi	r20, 0xF9	; 249
 2e8:	5e e3       	ldi	r21, 0x3E	; 62
 2ea:	28 d2       	rcall	.+1104   	; 0x73c <__mulsf3>
 2ec:	23 e3       	ldi	r18, 0x33	; 51
 2ee:	33 e9       	ldi	r19, 0x93	; 147
 2f0:	48 e8       	ldi	r20, 0x88	; 136
 2f2:	53 e4       	ldi	r21, 0x43	; 67
 2f4:	9c d0       	rcall	.+312    	; 0x42e <__subsf3>
			return value;
 2f6:	56 2f       	mov	r21, r22
 2f8:	47 2f       	mov	r20, r23
 2fa:	38 2f       	mov	r19, r24
 2fc:	29 2f       	mov	r18, r25
 2fe:	23 c0       	rjmp	.+70     	; 0x346 <LM335_Read+0x9e>
		break;
		case FAHRENHEIT:
			value = (((raw_value * 0.4882) - 273.15) * 1.8) + 32;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	8d d1       	rcall	.+794    	; 0x620 <__floatunsisf>
 306:	2a e5       	ldi	r18, 0x5A	; 90
 308:	35 ef       	ldi	r19, 0xF5	; 245
 30a:	49 ef       	ldi	r20, 0xF9	; 249
 30c:	5e e3       	ldi	r21, 0x3E	; 62
 30e:	16 d2       	rcall	.+1068   	; 0x73c <__mulsf3>
 310:	23 e3       	ldi	r18, 0x33	; 51
 312:	33 e9       	ldi	r19, 0x93	; 147
 314:	48 e8       	ldi	r20, 0x88	; 136
 316:	53 e4       	ldi	r21, 0x43	; 67
 318:	8a d0       	rcall	.+276    	; 0x42e <__subsf3>
 31a:	26 e6       	ldi	r18, 0x66	; 102
 31c:	36 e6       	ldi	r19, 0x66	; 102
 31e:	46 ee       	ldi	r20, 0xE6	; 230
 320:	5f e3       	ldi	r21, 0x3F	; 63
 322:	0c d2       	rcall	.+1048   	; 0x73c <__mulsf3>
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	52 e4       	ldi	r21, 0x42	; 66
 32c:	81 d0       	rcall	.+258    	; 0x430 <__addsf3>
			return value;
 32e:	56 2f       	mov	r21, r22
 330:	47 2f       	mov	r20, r23
 332:	38 2f       	mov	r19, r24
 334:	29 2f       	mov	r18, r25
 336:	07 c0       	rjmp	.+14     	; 0x346 <LM335_Read+0x9e>
		break;
	}
	//Invalid enum passed, return raw_adc value
	return (float)raw_value;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	71 d1       	rcall	.+738    	; 0x620 <__floatunsisf>
 33e:	56 2f       	mov	r21, r22
 340:	47 2f       	mov	r20, r23
 342:	38 2f       	mov	r19, r24
 344:	29 2f       	mov	r18, r25
}
 346:	65 2f       	mov	r22, r21
 348:	74 2f       	mov	r23, r20
 34a:	83 2f       	mov	r24, r19
 34c:	92 2f       	mov	r25, r18
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <__vector_16>:

/******************** Functions **************************/


/******************** Interrupt Service Routines *********/
ISR(TIMER0_OVF_vect){
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
	LTC4627JS_DisplayTemp(display_temp, FAHRENHEIT);
 374:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 378:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 37c:	62 e0       	ldi	r22, 0x02	; 2
 37e:	e2 de       	rcall	.-572    	; 0x144 <LTC4627JS_DisplayTemp>
}
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	bf 91       	pop	r27
 386:	af 91       	pop	r26
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	7f 91       	pop	r23
 38e:	6f 91       	pop	r22
 390:	5f 91       	pop	r21
 392:	4f 91       	pop	r20
 394:	3f 91       	pop	r19
 396:	2f 91       	pop	r18
 398:	0f 90       	pop	r0
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	0f 90       	pop	r0
 39e:	1f 90       	pop	r1
 3a0:	18 95       	reti

000003a2 <main>:
{
	//Temperature value
	float temperature = 0.0;
	
	/* Initialize the LM335 */
	LM335_Init();
 3a2:	80 df       	rcall	.-256    	; 0x2a4 <LM335_Init>
	
	/* Initialize the LTC4627JS to control the 4-digit 7-segment display */
	LTC4627JS_Init();
 3a4:	59 de       	rcall	.-846    	; 0x58 <LTC4627JS_Init>
	
	/* Allow for Global Interrupts */
	sei();
 3a6:	78 94       	sei

/******************** Main *******************************/
int main(void)
{
	//Temperature value
	float temperature = 0.0;
 3a8:	c1 2c       	mov	r12, r1
 3aa:	d1 2c       	mov	r13, r1
 3ac:	76 01       	movw	r14, r12
 3ae:	ce e1       	ldi	r28, 0x1E	; 30
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
	/* State machine loop */
	while (1)
	{
		//Get the current temp from average of 10 readings
		for(int i = 0; i < 30; i++){
			temperature += LM335_Read(FAHRENHEIT);
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	79 df       	rcall	.-270    	; 0x2a8 <LM335_Read>
 3b6:	9b 01       	movw	r18, r22
 3b8:	ac 01       	movw	r20, r24
 3ba:	c7 01       	movw	r24, r14
 3bc:	b6 01       	movw	r22, r12
 3be:	38 d0       	rcall	.+112    	; 0x430 <__addsf3>
 3c0:	6b 01       	movw	r12, r22
 3c2:	7c 01       	movw	r14, r24
 3c4:	21 97       	sbiw	r28, 0x01	; 1
	
	/* State machine loop */
	while (1)
	{
		//Get the current temp from average of 10 readings
		for(int i = 0; i < 30; i++){
 3c6:	a9 f7       	brne	.-22     	; 0x3b2 <main+0x10>
			temperature += LM335_Read(FAHRENHEIT);
		}
		temperature = temperature/30;
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 ef       	ldi	r20, 0xF0	; 240
 3ce:	51 e4       	ldi	r21, 0x41	; 65
 3d0:	93 d0       	rcall	.+294    	; 0x4f8 <__divsf3>
 3d2:	6b 01       	movw	r12, r22
 3d4:	7c 01       	movw	r14, r24
		//Output the number to the seven segment display rounded to the nearest tens place
		//Push the first decimal up one position so it will display
		display_temp = (uint16_t)temperature;
 3d6:	f8 d0       	rcall	.+496    	; 0x5c8 <__fixunssfsi>
 3d8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 3dc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
	}
 3e0:	e6 cf       	rjmp	.-52     	; 0x3ae <main+0xc>

000003e2 <PWM_Init>:
/******************** Functions **************************/

//Initialize the PWM Output
void PWM_Init(){
	//Enable hardware outputs
	DDRB |= (1<<PB1);
 3e2:	21 9a       	sbi	0x04, 1	; 4
	//Set the default values for outputs to zero and inputs to have pull-up resistors
	PORTB |= (0<<PB1);
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	85 b9       	out	0x05, r24	; 5
	//Enable Timer 0
	//Enable PWM Output 0A and 0B and Fast PWM
	TCCR0A |= (0<<COM0A1) | (0<<COM0B1) | (1<<WGM01) | (0<<WGM00);
 3e8:	84 b5       	in	r24, 0x24	; 36
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	84 bd       	out	0x24, r24	; 36
	//Enable Clock Divider/64
	TCCR0B |= (1<<CS01) | (1<<CS00);
 3ee:	85 b5       	in	r24, 0x25	; 37
 3f0:	83 60       	ori	r24, 0x03	; 3
 3f2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<TOIE0);
 3f4:	ee e6       	ldi	r30, 0x6E	; 110
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	81 60       	ori	r24, 0x01	; 1
 3fc:	80 83       	st	Z, r24
	//Max counter value possible set though OCR0A & OCR0B
	OCR0A = 0xFF;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xFF;
 402:	88 bd       	out	0x28, r24	; 40
	//Enable Timer 1
	//Enable PWM Output 1A and 1B and Fast PWM
	TCCR1A = (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
 404:	81 ea       	ldi	r24, 0xA1	; 161
 406:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	//Enable Clock Divider/64
	TCCR1B = (1<<CS11) | (1<<CS10) | (1<<WGM12);
 40a:	8b e0       	ldi	r24, 0x0B	; 11
 40c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	//Max PWM value possible set though OCR1A & OCR1B
	OCR1A = 0x00;
 410:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 414:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 0x00;
 418:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 41c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 420:	08 95       	ret

00000422 <PWM_timer1_a>:
	return; //Return to call point
}
//Change timer 1 a value
void PWM_timer1_a(uint8_t value){
	OCR1A = value;
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 428:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 42c:	08 95       	ret

0000042e <__subsf3>:
 42e:	50 58       	subi	r21, 0x80	; 128

00000430 <__addsf3>:
 430:	bb 27       	eor	r27, r27
 432:	aa 27       	eor	r26, r26
 434:	0e d0       	rcall	.+28     	; 0x452 <__addsf3x>
 436:	48 c1       	rjmp	.+656    	; 0x6c8 <__fp_round>
 438:	39 d1       	rcall	.+626    	; 0x6ac <__fp_pscA>
 43a:	30 f0       	brcs	.+12     	; 0x448 <__addsf3+0x18>
 43c:	3e d1       	rcall	.+636    	; 0x6ba <__fp_pscB>
 43e:	20 f0       	brcs	.+8      	; 0x448 <__addsf3+0x18>
 440:	31 f4       	brne	.+12     	; 0x44e <__addsf3+0x1e>
 442:	9f 3f       	cpi	r25, 0xFF	; 255
 444:	11 f4       	brne	.+4      	; 0x44a <__addsf3+0x1a>
 446:	1e f4       	brtc	.+6      	; 0x44e <__addsf3+0x1e>
 448:	2e c1       	rjmp	.+604    	; 0x6a6 <__fp_nan>
 44a:	0e f4       	brtc	.+2      	; 0x44e <__addsf3+0x1e>
 44c:	e0 95       	com	r30
 44e:	e7 fb       	bst	r30, 7
 450:	24 c1       	rjmp	.+584    	; 0x69a <__fp_inf>

00000452 <__addsf3x>:
 452:	e9 2f       	mov	r30, r25
 454:	4a d1       	rcall	.+660    	; 0x6ea <__fp_split3>
 456:	80 f3       	brcs	.-32     	; 0x438 <__addsf3+0x8>
 458:	ba 17       	cp	r27, r26
 45a:	62 07       	cpc	r22, r18
 45c:	73 07       	cpc	r23, r19
 45e:	84 07       	cpc	r24, r20
 460:	95 07       	cpc	r25, r21
 462:	18 f0       	brcs	.+6      	; 0x46a <__addsf3x+0x18>
 464:	71 f4       	brne	.+28     	; 0x482 <__addsf3x+0x30>
 466:	9e f5       	brtc	.+102    	; 0x4ce <__addsf3x+0x7c>
 468:	62 c1       	rjmp	.+708    	; 0x72e <__fp_zero>
 46a:	0e f4       	brtc	.+2      	; 0x46e <__addsf3x+0x1c>
 46c:	e0 95       	com	r30
 46e:	0b 2e       	mov	r0, r27
 470:	ba 2f       	mov	r27, r26
 472:	a0 2d       	mov	r26, r0
 474:	0b 01       	movw	r0, r22
 476:	b9 01       	movw	r22, r18
 478:	90 01       	movw	r18, r0
 47a:	0c 01       	movw	r0, r24
 47c:	ca 01       	movw	r24, r20
 47e:	a0 01       	movw	r20, r0
 480:	11 24       	eor	r1, r1
 482:	ff 27       	eor	r31, r31
 484:	59 1b       	sub	r21, r25
 486:	99 f0       	breq	.+38     	; 0x4ae <__addsf3x+0x5c>
 488:	59 3f       	cpi	r21, 0xF9	; 249
 48a:	50 f4       	brcc	.+20     	; 0x4a0 <__addsf3x+0x4e>
 48c:	50 3e       	cpi	r21, 0xE0	; 224
 48e:	68 f1       	brcs	.+90     	; 0x4ea <__addsf3x+0x98>
 490:	1a 16       	cp	r1, r26
 492:	f0 40       	sbci	r31, 0x00	; 0
 494:	a2 2f       	mov	r26, r18
 496:	23 2f       	mov	r18, r19
 498:	34 2f       	mov	r19, r20
 49a:	44 27       	eor	r20, r20
 49c:	58 5f       	subi	r21, 0xF8	; 248
 49e:	f3 cf       	rjmp	.-26     	; 0x486 <__addsf3x+0x34>
 4a0:	46 95       	lsr	r20
 4a2:	37 95       	ror	r19
 4a4:	27 95       	ror	r18
 4a6:	a7 95       	ror	r26
 4a8:	f0 40       	sbci	r31, 0x00	; 0
 4aa:	53 95       	inc	r21
 4ac:	c9 f7       	brne	.-14     	; 0x4a0 <__addsf3x+0x4e>
 4ae:	7e f4       	brtc	.+30     	; 0x4ce <__addsf3x+0x7c>
 4b0:	1f 16       	cp	r1, r31
 4b2:	ba 0b       	sbc	r27, r26
 4b4:	62 0b       	sbc	r22, r18
 4b6:	73 0b       	sbc	r23, r19
 4b8:	84 0b       	sbc	r24, r20
 4ba:	ba f0       	brmi	.+46     	; 0x4ea <__addsf3x+0x98>
 4bc:	91 50       	subi	r25, 0x01	; 1
 4be:	a1 f0       	breq	.+40     	; 0x4e8 <__addsf3x+0x96>
 4c0:	ff 0f       	add	r31, r31
 4c2:	bb 1f       	adc	r27, r27
 4c4:	66 1f       	adc	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	c2 f7       	brpl	.-16     	; 0x4bc <__addsf3x+0x6a>
 4cc:	0e c0       	rjmp	.+28     	; 0x4ea <__addsf3x+0x98>
 4ce:	ba 0f       	add	r27, r26
 4d0:	62 1f       	adc	r22, r18
 4d2:	73 1f       	adc	r23, r19
 4d4:	84 1f       	adc	r24, r20
 4d6:	48 f4       	brcc	.+18     	; 0x4ea <__addsf3x+0x98>
 4d8:	87 95       	ror	r24
 4da:	77 95       	ror	r23
 4dc:	67 95       	ror	r22
 4de:	b7 95       	ror	r27
 4e0:	f7 95       	ror	r31
 4e2:	9e 3f       	cpi	r25, 0xFE	; 254
 4e4:	08 f0       	brcs	.+2      	; 0x4e8 <__addsf3x+0x96>
 4e6:	b3 cf       	rjmp	.-154    	; 0x44e <__addsf3+0x1e>
 4e8:	93 95       	inc	r25
 4ea:	88 0f       	add	r24, r24
 4ec:	08 f0       	brcs	.+2      	; 0x4f0 <__addsf3x+0x9e>
 4ee:	99 27       	eor	r25, r25
 4f0:	ee 0f       	add	r30, r30
 4f2:	97 95       	ror	r25
 4f4:	87 95       	ror	r24
 4f6:	08 95       	ret

000004f8 <__divsf3>:
 4f8:	0c d0       	rcall	.+24     	; 0x512 <__divsf3x>
 4fa:	e6 c0       	rjmp	.+460    	; 0x6c8 <__fp_round>
 4fc:	de d0       	rcall	.+444    	; 0x6ba <__fp_pscB>
 4fe:	40 f0       	brcs	.+16     	; 0x510 <__stack+0x11>
 500:	d5 d0       	rcall	.+426    	; 0x6ac <__fp_pscA>
 502:	30 f0       	brcs	.+12     	; 0x510 <__stack+0x11>
 504:	21 f4       	brne	.+8      	; 0x50e <__stack+0xf>
 506:	5f 3f       	cpi	r21, 0xFF	; 255
 508:	19 f0       	breq	.+6      	; 0x510 <__stack+0x11>
 50a:	c7 c0       	rjmp	.+398    	; 0x69a <__fp_inf>
 50c:	51 11       	cpse	r21, r1
 50e:	10 c1       	rjmp	.+544    	; 0x730 <__fp_szero>
 510:	ca c0       	rjmp	.+404    	; 0x6a6 <__fp_nan>

00000512 <__divsf3x>:
 512:	eb d0       	rcall	.+470    	; 0x6ea <__fp_split3>
 514:	98 f3       	brcs	.-26     	; 0x4fc <__divsf3+0x4>

00000516 <__divsf3_pse>:
 516:	99 23       	and	r25, r25
 518:	c9 f3       	breq	.-14     	; 0x50c <__stack+0xd>
 51a:	55 23       	and	r21, r21
 51c:	b1 f3       	breq	.-20     	; 0x50a <__stack+0xb>
 51e:	95 1b       	sub	r25, r21
 520:	55 0b       	sbc	r21, r21
 522:	bb 27       	eor	r27, r27
 524:	aa 27       	eor	r26, r26
 526:	62 17       	cp	r22, r18
 528:	73 07       	cpc	r23, r19
 52a:	84 07       	cpc	r24, r20
 52c:	38 f0       	brcs	.+14     	; 0x53c <__divsf3_pse+0x26>
 52e:	9f 5f       	subi	r25, 0xFF	; 255
 530:	5f 4f       	sbci	r21, 0xFF	; 255
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	44 1f       	adc	r20, r20
 538:	aa 1f       	adc	r26, r26
 53a:	a9 f3       	breq	.-22     	; 0x526 <__divsf3_pse+0x10>
 53c:	33 d0       	rcall	.+102    	; 0x5a4 <__divsf3_pse+0x8e>
 53e:	0e 2e       	mov	r0, r30
 540:	3a f0       	brmi	.+14     	; 0x550 <__divsf3_pse+0x3a>
 542:	e0 e8       	ldi	r30, 0x80	; 128
 544:	30 d0       	rcall	.+96     	; 0x5a6 <__divsf3_pse+0x90>
 546:	91 50       	subi	r25, 0x01	; 1
 548:	50 40       	sbci	r21, 0x00	; 0
 54a:	e6 95       	lsr	r30
 54c:	00 1c       	adc	r0, r0
 54e:	ca f7       	brpl	.-14     	; 0x542 <__divsf3_pse+0x2c>
 550:	29 d0       	rcall	.+82     	; 0x5a4 <__divsf3_pse+0x8e>
 552:	fe 2f       	mov	r31, r30
 554:	27 d0       	rcall	.+78     	; 0x5a4 <__divsf3_pse+0x8e>
 556:	66 0f       	add	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	88 1f       	adc	r24, r24
 55c:	bb 1f       	adc	r27, r27
 55e:	26 17       	cp	r18, r22
 560:	37 07       	cpc	r19, r23
 562:	48 07       	cpc	r20, r24
 564:	ab 07       	cpc	r26, r27
 566:	b0 e8       	ldi	r27, 0x80	; 128
 568:	09 f0       	breq	.+2      	; 0x56c <__divsf3_pse+0x56>
 56a:	bb 0b       	sbc	r27, r27
 56c:	80 2d       	mov	r24, r0
 56e:	bf 01       	movw	r22, r30
 570:	ff 27       	eor	r31, r31
 572:	93 58       	subi	r25, 0x83	; 131
 574:	5f 4f       	sbci	r21, 0xFF	; 255
 576:	2a f0       	brmi	.+10     	; 0x582 <__divsf3_pse+0x6c>
 578:	9e 3f       	cpi	r25, 0xFE	; 254
 57a:	51 05       	cpc	r21, r1
 57c:	68 f0       	brcs	.+26     	; 0x598 <__divsf3_pse+0x82>
 57e:	8d c0       	rjmp	.+282    	; 0x69a <__fp_inf>
 580:	d7 c0       	rjmp	.+430    	; 0x730 <__fp_szero>
 582:	5f 3f       	cpi	r21, 0xFF	; 255
 584:	ec f3       	brlt	.-6      	; 0x580 <__divsf3_pse+0x6a>
 586:	98 3e       	cpi	r25, 0xE8	; 232
 588:	dc f3       	brlt	.-10     	; 0x580 <__divsf3_pse+0x6a>
 58a:	86 95       	lsr	r24
 58c:	77 95       	ror	r23
 58e:	67 95       	ror	r22
 590:	b7 95       	ror	r27
 592:	f7 95       	ror	r31
 594:	9f 5f       	subi	r25, 0xFF	; 255
 596:	c9 f7       	brne	.-14     	; 0x58a <__divsf3_pse+0x74>
 598:	88 0f       	add	r24, r24
 59a:	91 1d       	adc	r25, r1
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	97 f9       	bld	r25, 7
 5a2:	08 95       	ret
 5a4:	e1 e0       	ldi	r30, 0x01	; 1
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	88 1f       	adc	r24, r24
 5ac:	bb 1f       	adc	r27, r27
 5ae:	62 17       	cp	r22, r18
 5b0:	73 07       	cpc	r23, r19
 5b2:	84 07       	cpc	r24, r20
 5b4:	ba 07       	cpc	r27, r26
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__divsf3_pse+0xaa>
 5b8:	62 1b       	sub	r22, r18
 5ba:	73 0b       	sbc	r23, r19
 5bc:	84 0b       	sbc	r24, r20
 5be:	ba 0b       	sbc	r27, r26
 5c0:	ee 1f       	adc	r30, r30
 5c2:	88 f7       	brcc	.-30     	; 0x5a6 <__divsf3_pse+0x90>
 5c4:	e0 95       	com	r30
 5c6:	08 95       	ret

000005c8 <__fixunssfsi>:
 5c8:	98 d0       	rcall	.+304    	; 0x6fa <__fp_splitA>
 5ca:	88 f0       	brcs	.+34     	; 0x5ee <__fixunssfsi+0x26>
 5cc:	9f 57       	subi	r25, 0x7F	; 127
 5ce:	90 f0       	brcs	.+36     	; 0x5f4 <__fixunssfsi+0x2c>
 5d0:	b9 2f       	mov	r27, r25
 5d2:	99 27       	eor	r25, r25
 5d4:	b7 51       	subi	r27, 0x17	; 23
 5d6:	a0 f0       	brcs	.+40     	; 0x600 <__fixunssfsi+0x38>
 5d8:	d1 f0       	breq	.+52     	; 0x60e <__fixunssfsi+0x46>
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	1a f0       	brmi	.+6      	; 0x5ea <__fixunssfsi+0x22>
 5e4:	ba 95       	dec	r27
 5e6:	c9 f7       	brne	.-14     	; 0x5da <__fixunssfsi+0x12>
 5e8:	12 c0       	rjmp	.+36     	; 0x60e <__fixunssfsi+0x46>
 5ea:	b1 30       	cpi	r27, 0x01	; 1
 5ec:	81 f0       	breq	.+32     	; 0x60e <__fixunssfsi+0x46>
 5ee:	9f d0       	rcall	.+318    	; 0x72e <__fp_zero>
 5f0:	b1 e0       	ldi	r27, 0x01	; 1
 5f2:	08 95       	ret
 5f4:	9c c0       	rjmp	.+312    	; 0x72e <__fp_zero>
 5f6:	67 2f       	mov	r22, r23
 5f8:	78 2f       	mov	r23, r24
 5fa:	88 27       	eor	r24, r24
 5fc:	b8 5f       	subi	r27, 0xF8	; 248
 5fe:	39 f0       	breq	.+14     	; 0x60e <__fixunssfsi+0x46>
 600:	b9 3f       	cpi	r27, 0xF9	; 249
 602:	cc f3       	brlt	.-14     	; 0x5f6 <__fixunssfsi+0x2e>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b3 95       	inc	r27
 60c:	d9 f7       	brne	.-10     	; 0x604 <__fixunssfsi+0x3c>
 60e:	3e f4       	brtc	.+14     	; 0x61e <__fixunssfsi+0x56>
 610:	90 95       	com	r25
 612:	80 95       	com	r24
 614:	70 95       	com	r23
 616:	61 95       	neg	r22
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <__floatunsisf>:
 620:	e8 94       	clt
 622:	09 c0       	rjmp	.+18     	; 0x636 <__floatsisf+0x12>

00000624 <__floatsisf>:
 624:	97 fb       	bst	r25, 7
 626:	3e f4       	brtc	.+14     	; 0x636 <__floatsisf+0x12>
 628:	90 95       	com	r25
 62a:	80 95       	com	r24
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	99 23       	and	r25, r25
 638:	a9 f0       	breq	.+42     	; 0x664 <__floatsisf+0x40>
 63a:	f9 2f       	mov	r31, r25
 63c:	96 e9       	ldi	r25, 0x96	; 150
 63e:	bb 27       	eor	r27, r27
 640:	93 95       	inc	r25
 642:	f6 95       	lsr	r31
 644:	87 95       	ror	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b7 95       	ror	r27
 64c:	f1 11       	cpse	r31, r1
 64e:	f8 cf       	rjmp	.-16     	; 0x640 <__floatsisf+0x1c>
 650:	fa f4       	brpl	.+62     	; 0x690 <__floatsisf+0x6c>
 652:	bb 0f       	add	r27, r27
 654:	11 f4       	brne	.+4      	; 0x65a <__floatsisf+0x36>
 656:	60 ff       	sbrs	r22, 0
 658:	1b c0       	rjmp	.+54     	; 0x690 <__floatsisf+0x6c>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	16 c0       	rjmp	.+44     	; 0x690 <__floatsisf+0x6c>
 664:	88 23       	and	r24, r24
 666:	11 f0       	breq	.+4      	; 0x66c <__floatsisf+0x48>
 668:	96 e9       	ldi	r25, 0x96	; 150
 66a:	11 c0       	rjmp	.+34     	; 0x68e <__floatsisf+0x6a>
 66c:	77 23       	and	r23, r23
 66e:	21 f0       	breq	.+8      	; 0x678 <__floatsisf+0x54>
 670:	9e e8       	ldi	r25, 0x8E	; 142
 672:	87 2f       	mov	r24, r23
 674:	76 2f       	mov	r23, r22
 676:	05 c0       	rjmp	.+10     	; 0x682 <__floatsisf+0x5e>
 678:	66 23       	and	r22, r22
 67a:	71 f0       	breq	.+28     	; 0x698 <__floatsisf+0x74>
 67c:	96 e8       	ldi	r25, 0x86	; 134
 67e:	86 2f       	mov	r24, r22
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	2a f0       	brmi	.+10     	; 0x690 <__floatsisf+0x6c>
 686:	9a 95       	dec	r25
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	da f7       	brpl	.-10     	; 0x686 <__floatsisf+0x62>
 690:	88 0f       	add	r24, r24
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	97 f9       	bld	r25, 7
 698:	08 95       	ret

0000069a <__fp_inf>:
 69a:	97 f9       	bld	r25, 7
 69c:	9f 67       	ori	r25, 0x7F	; 127
 69e:	80 e8       	ldi	r24, 0x80	; 128
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	08 95       	ret

000006a6 <__fp_nan>:
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	80 ec       	ldi	r24, 0xC0	; 192
 6aa:	08 95       	ret

000006ac <__fp_pscA>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	09 06       	cpc	r0, r25
 6b8:	08 95       	ret

000006ba <__fp_pscB>:
 6ba:	00 24       	eor	r0, r0
 6bc:	0a 94       	dec	r0
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	05 06       	cpc	r0, r21
 6c6:	08 95       	ret

000006c8 <__fp_round>:
 6c8:	09 2e       	mov	r0, r25
 6ca:	03 94       	inc	r0
 6cc:	00 0c       	add	r0, r0
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__fp_round+0xc>
 6d0:	88 23       	and	r24, r24
 6d2:	52 f0       	brmi	.+20     	; 0x6e8 <__fp_round+0x20>
 6d4:	bb 0f       	add	r27, r27
 6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__fp_round+0x20>
 6d8:	bf 2b       	or	r27, r31
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__fp_round+0x18>
 6dc:	60 ff       	sbrs	r22, 0
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__fp_round+0x20>
 6e0:	6f 5f       	subi	r22, 0xFF	; 255
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	08 95       	ret

000006ea <__fp_split3>:
 6ea:	57 fd       	sbrc	r21, 7
 6ec:	90 58       	subi	r25, 0x80	; 128
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	59 f0       	breq	.+22     	; 0x70a <__fp_splitA+0x10>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	71 f0       	breq	.+28     	; 0x714 <__fp_splitA+0x1a>
 6f8:	47 95       	ror	r20

000006fa <__fp_splitA>:
 6fa:	88 0f       	add	r24, r24
 6fc:	97 fb       	bst	r25, 7
 6fe:	99 1f       	adc	r25, r25
 700:	61 f0       	breq	.+24     	; 0x71a <__fp_splitA+0x20>
 702:	9f 3f       	cpi	r25, 0xFF	; 255
 704:	79 f0       	breq	.+30     	; 0x724 <__fp_splitA+0x2a>
 706:	87 95       	ror	r24
 708:	08 95       	ret
 70a:	12 16       	cp	r1, r18
 70c:	13 06       	cpc	r1, r19
 70e:	14 06       	cpc	r1, r20
 710:	55 1f       	adc	r21, r21
 712:	f2 cf       	rjmp	.-28     	; 0x6f8 <__fp_split3+0xe>
 714:	46 95       	lsr	r20
 716:	f1 df       	rcall	.-30     	; 0x6fa <__fp_splitA>
 718:	08 c0       	rjmp	.+16     	; 0x72a <__fp_splitA+0x30>
 71a:	16 16       	cp	r1, r22
 71c:	17 06       	cpc	r1, r23
 71e:	18 06       	cpc	r1, r24
 720:	99 1f       	adc	r25, r25
 722:	f1 cf       	rjmp	.-30     	; 0x706 <__fp_splitA+0xc>
 724:	86 95       	lsr	r24
 726:	71 05       	cpc	r23, r1
 728:	61 05       	cpc	r22, r1
 72a:	08 94       	sec
 72c:	08 95       	ret

0000072e <__fp_zero>:
 72e:	e8 94       	clt

00000730 <__fp_szero>:
 730:	bb 27       	eor	r27, r27
 732:	66 27       	eor	r22, r22
 734:	77 27       	eor	r23, r23
 736:	cb 01       	movw	r24, r22
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__mulsf3>:
 73c:	0b d0       	rcall	.+22     	; 0x754 <__mulsf3x>
 73e:	c4 cf       	rjmp	.-120    	; 0x6c8 <__fp_round>
 740:	b5 df       	rcall	.-150    	; 0x6ac <__fp_pscA>
 742:	28 f0       	brcs	.+10     	; 0x74e <__mulsf3+0x12>
 744:	ba df       	rcall	.-140    	; 0x6ba <__fp_pscB>
 746:	18 f0       	brcs	.+6      	; 0x74e <__mulsf3+0x12>
 748:	95 23       	and	r25, r21
 74a:	09 f0       	breq	.+2      	; 0x74e <__mulsf3+0x12>
 74c:	a6 cf       	rjmp	.-180    	; 0x69a <__fp_inf>
 74e:	ab cf       	rjmp	.-170    	; 0x6a6 <__fp_nan>
 750:	11 24       	eor	r1, r1
 752:	ee cf       	rjmp	.-36     	; 0x730 <__fp_szero>

00000754 <__mulsf3x>:
 754:	ca df       	rcall	.-108    	; 0x6ea <__fp_split3>
 756:	a0 f3       	brcs	.-24     	; 0x740 <__mulsf3+0x4>

00000758 <__mulsf3_pse>:
 758:	95 9f       	mul	r25, r21
 75a:	d1 f3       	breq	.-12     	; 0x750 <__mulsf3+0x14>
 75c:	95 0f       	add	r25, r21
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	55 1f       	adc	r21, r21
 762:	62 9f       	mul	r22, r18
 764:	f0 01       	movw	r30, r0
 766:	72 9f       	mul	r23, r18
 768:	bb 27       	eor	r27, r27
 76a:	f0 0d       	add	r31, r0
 76c:	b1 1d       	adc	r27, r1
 76e:	63 9f       	mul	r22, r19
 770:	aa 27       	eor	r26, r26
 772:	f0 0d       	add	r31, r0
 774:	b1 1d       	adc	r27, r1
 776:	aa 1f       	adc	r26, r26
 778:	64 9f       	mul	r22, r20
 77a:	66 27       	eor	r22, r22
 77c:	b0 0d       	add	r27, r0
 77e:	a1 1d       	adc	r26, r1
 780:	66 1f       	adc	r22, r22
 782:	82 9f       	mul	r24, r18
 784:	22 27       	eor	r18, r18
 786:	b0 0d       	add	r27, r0
 788:	a1 1d       	adc	r26, r1
 78a:	62 1f       	adc	r22, r18
 78c:	73 9f       	mul	r23, r19
 78e:	b0 0d       	add	r27, r0
 790:	a1 1d       	adc	r26, r1
 792:	62 1f       	adc	r22, r18
 794:	83 9f       	mul	r24, r19
 796:	a0 0d       	add	r26, r0
 798:	61 1d       	adc	r22, r1
 79a:	22 1f       	adc	r18, r18
 79c:	74 9f       	mul	r23, r20
 79e:	33 27       	eor	r19, r19
 7a0:	a0 0d       	add	r26, r0
 7a2:	61 1d       	adc	r22, r1
 7a4:	23 1f       	adc	r18, r19
 7a6:	84 9f       	mul	r24, r20
 7a8:	60 0d       	add	r22, r0
 7aa:	21 1d       	adc	r18, r1
 7ac:	82 2f       	mov	r24, r18
 7ae:	76 2f       	mov	r23, r22
 7b0:	6a 2f       	mov	r22, r26
 7b2:	11 24       	eor	r1, r1
 7b4:	9f 57       	subi	r25, 0x7F	; 127
 7b6:	50 40       	sbci	r21, 0x00	; 0
 7b8:	8a f0       	brmi	.+34     	; 0x7dc <__mulsf3_pse+0x84>
 7ba:	e1 f0       	breq	.+56     	; 0x7f4 <__mulsf3_pse+0x9c>
 7bc:	88 23       	and	r24, r24
 7be:	4a f0       	brmi	.+18     	; 0x7d2 <__mulsf3_pse+0x7a>
 7c0:	ee 0f       	add	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	bb 1f       	adc	r27, r27
 7c6:	66 1f       	adc	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	91 50       	subi	r25, 0x01	; 1
 7ce:	50 40       	sbci	r21, 0x00	; 0
 7d0:	a9 f7       	brne	.-22     	; 0x7bc <__mulsf3_pse+0x64>
 7d2:	9e 3f       	cpi	r25, 0xFE	; 254
 7d4:	51 05       	cpc	r21, r1
 7d6:	70 f0       	brcs	.+28     	; 0x7f4 <__mulsf3_pse+0x9c>
 7d8:	60 cf       	rjmp	.-320    	; 0x69a <__fp_inf>
 7da:	aa cf       	rjmp	.-172    	; 0x730 <__fp_szero>
 7dc:	5f 3f       	cpi	r21, 0xFF	; 255
 7de:	ec f3       	brlt	.-6      	; 0x7da <__mulsf3_pse+0x82>
 7e0:	98 3e       	cpi	r25, 0xE8	; 232
 7e2:	dc f3       	brlt	.-10     	; 0x7da <__mulsf3_pse+0x82>
 7e4:	86 95       	lsr	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b7 95       	ror	r27
 7ec:	f7 95       	ror	r31
 7ee:	e7 95       	ror	r30
 7f0:	9f 5f       	subi	r25, 0xFF	; 255
 7f2:	c1 f7       	brne	.-16     	; 0x7e4 <__mulsf3_pse+0x8c>
 7f4:	fe 2b       	or	r31, r30
 7f6:	88 0f       	add	r24, r24
 7f8:	91 1d       	adc	r25, r1
 7fa:	96 95       	lsr	r25
 7fc:	87 95       	ror	r24
 7fe:	97 f9       	bld	r25, 7
 800:	08 95       	ret

00000802 <__umulhisi3>:
 802:	a2 9f       	mul	r26, r18
 804:	b0 01       	movw	r22, r0
 806:	b3 9f       	mul	r27, r19
 808:	c0 01       	movw	r24, r0
 80a:	a3 9f       	mul	r26, r19
 80c:	01 d0       	rcall	.+2      	; 0x810 <__umulhisi3+0xe>
 80e:	b2 9f       	mul	r27, r18
 810:	70 0d       	add	r23, r0
 812:	81 1d       	adc	r24, r1
 814:	11 24       	eor	r1, r1
 816:	91 1d       	adc	r25, r1
 818:	08 95       	ret

0000081a <_exit>:
 81a:	f8 94       	cli

0000081c <__stop_program>:
 81c:	ff cf       	rjmp	.-2      	; 0x81c <__stop_program>
